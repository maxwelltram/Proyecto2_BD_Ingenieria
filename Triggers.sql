-----TRIGGER  NOMBRE PARA ESTUDIANTE
CREATE TRIGGER  NombreValidoEst
   ON  ESTUDIANTES
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @NOMBRE	varchar(150)
	SELECT @NOMBRE= NOMBRE FROM inserted
	IF  (@NOMBRE  LIKE '%[ A-Z,a-z, ]'
	AND @NOMBRE NOT LIKE '%[0-9]'
	AND @NOMBRE NOT LIKE '%@%'
	AND @NOMBRE NOT LIKE '%$%'
	)
	BEGIN
	PRINT 'STRING VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'STRING INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR FORMATO INVALIDO','ERROR')
	END
	
END
GO

-----TRIGGER DUPLICADO PARA ESTUDIANTES
--CREATE TRIGGER  DuplicadoValidoEst
--   ON  ESTUDIANTES
--   FOR INSERT
--AS 
--BEGIN
--SET NOCOUNT ON;
--	DECLARE @DPI	BIGINT
--	DECLARE @DPIAUX BIGINT
--	SELECT @DPI= DPI FROM inserted
--
--
--	SET @DPIAUX = (SELECT TOP 1 DPI FROM ESTUDIANTES WHERE DPI=@DPI)
--
--	IF  (@DPI!=@DPIAUX)
--	BEGIN
--	PRINT 'NO EXISTE DUPLICADO'
--	RETURN
--	END
--	BEGIN
--	PRINT ' EXISTE DUPLICADO'
--	ROLLBACK TRANSACTION
--	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR DUPLICADO EN ESTUDIANTES','ERROR')
--	END
--	
--END
--GO


-------TRIGGER CORREO PARA ESTUDIANTES

CREATE TRIGGER  CorreoValido
   ON  ESTUDIANTES
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @CORREO	varchar(150)
	SELECT @CORREO= CORREO FROM inserted
	IF  (@CORREO  LIKE '%[a-z,0-9]@[a-z]%.[A-Za-z]%[A-Za-z]'
	AND @CORREO NOT LIKE '%@%@%'
AND @CORREO NOT LIKE '%(%'
AND @CORREO NOT LIKE '%)%'
AND @CORREO NOT LIKE '%[%'
AND @CORREO NOT LIKE '%]%'
AND @CORREO NOT LIKE '%;%'
AND @CORREO NOT LIKE '%,%'
AND @CORREO NOT LIKE '%\%'
	)
	BEGIN
	PRINT 'CORREO VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'CORREO INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR CORREO INVALIDO, TABLA ESTUDIANTES','ERROR')
	END
	
END
GO

-----TRIGGER INSERT PARA ESTUDIANTE

CREATE TRIGGER InsertCorrecto
on ESTUDIANTES  FOR INSERT 
AS 
SET NOCOUNT ON;
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO ESTUDIANTE 
INSERTADO CORRECTAMENTE','INSERT')
GO

-----TRIGGER NOMBRE PARA DOCENTE
CREATE TRIGGER  NombreValidoDoc
   ON  DOCENTE
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @NOMBRE	varchar(150)
	SELECT @NOMBRE= NOMBRE FROM inserted
	IF  (@NOMBRE  LIKE '%[ A-Z,a-z, ]'
	AND @NOMBRE NOT LIKE '%[0-9]'
	AND @NOMBRE NOT LIKE '%@%'
	AND @NOMBRE NOT LIKE '%$%'
	)
	BEGIN
	PRINT 'STRING VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'STRING INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR FORMATO INVALIDO','ERROR')
	END
	
END
GO



-----TRIGGER CORREO PARA DOCENTE
CREATE TRIGGER  CorreoValidoDocente
   ON  DOCENTE
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @CORREO	varchar(150)
	SELECT @CORREO= CORREO FROM inserted
	IF  (@CORREO  LIKE '%[a-z,0-9]@[a-z]%.[A-Za-z]%[A-Za-z]'
	AND @CORREO NOT LIKE '%@%@%'
AND @CORREO NOT LIKE '%(%'
AND @CORREO NOT LIKE '%)%'
AND @CORREO NOT LIKE '%[%'
AND @CORREO NOT LIKE '%]%'
AND @CORREO NOT LIKE '%;%'
AND @CORREO NOT LIKE '%,%'
AND @CORREO NOT LIKE '%\%'
	)
	BEGIN
	PRINT 'CORREO VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'CORREO INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR CORREO INVALIDO, TABLA DOCENTES','ERROR')
	END
	
END
GO

-----TRIGGER DUPLICADO PARA DOCENTE
--ALTER TRIGGER  DuplicadoValidoDoc
--   ON  DOCENTE
--   FOR INSERT
--AS 
--BEGIN
--SET NOCOUNT ON;
--	DECLARE @DPI	BIGINT
--	DECLARE @DPIAUX BIGINT
--	SELECT @DPI= DPI FROM inserted
--
--
--	SET @DPIAUX = (SELECT TOP 1 NOMBRE FROM DOCENTE WHERE DPI=@DPI)
--
--	IF  (@DPI!=@DPIAUX)
--	BEGIN
--	PRINT 'NO EXISTE DUPLICADO'
--	RETURN
--	END
--	BEGIN
--	PRINT ' EXISTE DUPLICADO'
--	ROLLBACK TRANSACTION
--	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR DUPLICADO EN DOCENTES','ERROR')
--	END
--	
--END
--GO

-------TRIGGER DOCENTE INSERT PARA DOCENTE
CREATE TRIGGER InsertCorrectoDocente
on DOCENTE  FOR INSERT 
AS 
SET NOCOUNT ON;
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO DOCENTE 
INSERTADO CORRECTAMENTE','INSERT')
GO


------TRIGGER CARRERA NOMBRE VALIDO

CREATE TRIGGER  NombreValido
   ON  CARRERA
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @NOMBRE	varchar(150)
	SELECT @NOMBRE= NOMBRE FROM inserted
	IF  (@NOMBRE  LIKE '%[ A-Z,a-z, ]'
	AND @NOMBRE NOT LIKE '%[0-9]'
	AND @NOMBRE NOT LIKE '%@%'
	AND @NOMBRE NOT LIKE '%$%'
	)
	BEGIN
	PRINT 'STRING VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'STRING INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR FORMATO INVALIDO','ERROR')
	END
	
END
GO


------TRIGGER CARRERA DUPLICADA NO VALIDO

CREATE TRIGGER  DuplicadoValido
   ON  CARRERA
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @NOMBRE	varchar(150)
	DECLARE @NOMBREAux varchar(150)
	SELECT @NOMBRE= NOMBRE FROM inserted

	PRINT @NOMBRE
	SET @NombreAux = (SELECT TOP 1 NOMBRE FROM CARRERA WHERE NOMBRE=@NOMBRE)

	IF  (@NOMBRE!=@NOMBREAux)
	BEGIN
	PRINT 'NO EXISTE DUPLICADO'
	RETURN
	END
	BEGIN
	PRINT ' EXISTE DUPLICADO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR DUPLICADO EN CARRERA','ERROR')
	END
	
END
GO

--------TRIGGER INSERT PARA CARRERA

CREATE TRIGGER InsertCorrectoCarr
on CARRERA  FOR INSERT 
AS 
SET NOCOUNT ON;
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO CARRERA 
INSERTADO CORRECTAMENTE','INSERT')
GO


--------TRIGGER CURSO  CREDITOS POSITIVOS
CREATE TRIGGER  CREDITOSPOS
   ON  CURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @CREDIACR	INT
	DECLARE @CREDINEC	INT
	SELECT @CREDIACR=CREDITOSACR  FROM inserted
	SELECT @CREDINEC=CREDITOSNEC  FROM inserted
	IF  (@CREDIACR  >= 0	AND @CREDINEC >= 0)
		BEGIN
			PRINT 'CREDITOS POSITIVOS '
			RETURN
		END
	ELSE
		BEGIN
			PRINT 'CREDITOS EN NEGATIVOS '
			ROLLBACK TRANSACTION
			INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR CREDITOS NEGATIVOS','ERROR')
		END	
END
GO


------TRIGGER CURSO NOMBRE VALIDO

CREATE TRIGGER  NombreValidoCur
   ON  CURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @NOMBRE	varchar(150)
	SELECT @NOMBRE= NOMBRECUR FROM inserted
	IF  (@NOMBRE  LIKE '%[ A-Z,a-z,0-9, ]'
	AND @NOMBRE NOT LIKE '%@%'
	AND @NOMBRE NOT LIKE '%$%'
	AND @NOMBRE NOT LIKE '%!%'
	)
	BEGIN
	PRINT 'STRING VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'STRING INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR FORMATO INVALIDO CURSO','ERROR')
	END
	
END
GO

--------TRIGGER CURSO OBLIGATORIO O NO 
CREATE TRIGGER  ISOBLIGA
   ON  CURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @OBL	char(1)
	SELECT @OBL=ISOBLIGAT FROM inserted
	IF  (@OBL='1' OR @OBL='0')
		BEGIN
			PRINT 'ES VALOR CORRECTO '
			RETURN
		END
	ELSE
		BEGIN
			PRINT 'VALOR BOOLEANO NO ES CORRECTO '
			ROLLBACK TRANSACTION
			INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR VALOR BOOLEANO INCORRECTO','ERROR')
		END	
END
GO


--------TRIGGER INSERT PARA CURSO

CREATE TRIGGER InsertCorrectoCurso
on CURSO  FOR INSERT 
AS 
SET NOCOUNT ON;
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO CURSO 
INSERTADO CORRECTAMENTE','INSERT')
GO


------TRIGGER HABILITAR CURSO NOMBRE VALIDO 

CREATE TRIGGER  CicloValido
   ON  HABCURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @CICLO	varchar(2)
	SELECT @CICLO= CICLO FROM inserted
	IF  (@CICLO ='1S' OR @CICLO ='2S' OR @CICLO ='VJ' OR @CICLO ='VD')
	BEGIN
	PRINT 'CICLO VALIDO'
	RETURN
	END
	BEGIN
	PRINT 'CICLO INVALIDO'
	ROLLBACK TRANSACTION
	INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR CICLO INVALIDO','ERROR')
	END
	
END
GO


------TRIGGER HABILITAR CURSO SECCION VALIDA

CREATE TRIGGER  SeccValida
   ON  HABCURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @SECC	char(1)
	SELECT @SECC= SECCION FROM inserted
	IF  (@SECC LIKE '%[ABCDEFGHIJKLMNOPQRSTUVWXYZ]%')
		BEGIN
			PRINT 'SECCION VALIDA'+@SECC
			RETURN
		END
	ELSE
		BEGIN
			PRINT 'SECCION INVALIDA'
			ROLLBACK TRANSACTION
			INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR SECCION INVALIDA','ERROR')
		END
	
END
GO

--------TRIGGER HABILITAR CURSO CUPO MAXIMO
CREATE TRIGGER  CUPOMAX
   ON  HABCURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @CUPO	INT
	SELECT @CUPO=CUPOMAX  FROM inserted
	IF  (@CUPO  > 0	)
		BEGIN
			PRINT 'CUPO MAXIMO POSITIVO '
			RETURN
		END
	ELSE
		BEGIN
			PRINT 'CUPO MAXIMO NEGATIVO '
			ROLLBACK TRANSACTION
			INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR CUPO MAXIMO NEGATIVO','ERROR')
		END	
END
GO


--------TRIGGER INSERT PARA HABILITAR CURSO

CREATE TRIGGER InsertHabCurso
on HABCURSO  FOR INSERT 
AS 
SET NOCOUNT ON;
PRINT 'CURSO HABILITADO'
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO CURSO HABILITADO 
INSERTADO CORRECTAMENTE','INSERT')
GO

--------TRIGGER INSERT PARA HORARIO CURSO

CREATE TRIGGER  DIA
   ON  HORCURSO
   FOR INSERT
AS 
BEGIN
SET NOCOUNT ON;
	DECLARE @DI	INT
	SELECT @DI=DIA  FROM inserted
	IF  (@DI  > 0	AND @DI<7)
		BEGIN
			PRINT 'DIA SI EXISTE '
			RETURN
		END
	ELSE
		BEGIN
			PRINT 'DIA NO EXISTE '
			ROLLBACK TRANSACTION
			INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO NO INGRESADO, POR DIA NO EXISTENTE','ERROR')
		END	
END
GO

--------TRIGGER INSERT PARA HORARIO CURSO

CREATE TRIGGER InsertHorCurso
on HORCURSO  FOR INSERT 
AS 
SET NOCOUNT ON;
PRINT 'HORARIO CREADO'
INSERT INTO HISTORIAL VALUES(GETDATE(),'REGISTRO HORARIO CURSO 
INSERTADO CORRECTAMENTE','INSERT')
GO